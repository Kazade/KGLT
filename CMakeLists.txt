CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(simulant)

# Set a default build type if none was specified
IF(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  MESSAGE(STATUS "Setting CMAKE_BUILD_TYPE to 'Debug' by default. Use -DCMAKE_BUILD_TYPE=Release for a release build.")
  SET(CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the type of build." FORCE)
  # Set the possible values of build type for cmake-gui
  SET_PROPERTY(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
ENDIF()


# Set module options
OPTION(SIMULANT_BUILD_TESTS "Build Simulant tests" ON)
OPTION(SIMULANT_BUILD_SAMPLES "Build Simulant samples" ON)
OPTION(SIMULANT_GL_VERSION_1X "Enable GL 1.x support" OFF)

IF(SIMULANT_GL_VERSION_1X OR ${CMAKE_SYSTEM_NAME} MATCHES "Dreamcast")
    # Dreamcast builds always use this
    SET(SIMULANT_GL_VERSION_1X "1")
    ADD_DEFINITIONS(-DSIMULANT_GL_VERSION_1X)
ELSE()
    SET(SIMULANT_GL_VERSION_2X "1")
    ADD_DEFINITIONS(-DSIMULANT_GL_VERSION_2X)
ENDIF()

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake_modules/")

ADD_DEFINITIONS("-Wall")

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

IF(NOT ${CMAKE_SYSTEM_NAME} MATCHES "Dreamcast")
    FIND_PACKAGE(PkgConfig REQUIRED)
    PKG_CHECK_MODULES(SDL2 sdl2 REQUIRED)
    FIND_PACKAGE(OpenAL REQUIRED)
    FIND_PACKAGE(TinyXML)
    FIND_PACKAGE(ZLIB REQUIRED)
    FIND_PACKAGE(OpenGL REQUIRED)

    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
ELSE()
    MESSAGE("COMPILING FOR DREAMCAST")

    SET(OPENAL_INCLUDE_DIRS "") # Don't use OpenAL on DC
    SET(OPENAL_LIBRARY "")

    SET(SDL2_INCLUDE_DIRS "") # Don't use SDL2 on DC
    SET(SDL2_LIBRARIES "")

    SET(ZLIB_INCLUDE_DIRS $ENV{KOS_PORTS}/zlib)
    SET(OPENGL_INCLUDE_DIRS $ENV{KOS_PORTS}/libGL)

    SET(TinyXML_INCLUDE_DIR "") # This needs fixing!

ENDIF()

FILE(COPY ${CMAKE_CURRENT_SOURCE_DIR}/simulant/materials DESTINATION ${CMAKE_BINARY_DIR}/simulant)
FILE(COPY ${CMAKE_CURRENT_SOURCE_DIR}/simulant/fonts DESTINATION ${CMAKE_BINARY_DIR}/simulant)

INCLUDE_DIRECTORIES(
    ${SDL2_INCLUDE_DIRS}
    ${OPENGL_INCLUDE_DIRS}
    ${OPENAL_INCLUDE_DIRS}
    ${TinyXML_INCLUDE_DIR}
    ${ZLIB_INCLUDE_DIRS}
)

LINK_LIBRARIES(
    ${SDL2_LIBRARIES}
    ${OPENGL_LIBRARIES}
    ${OPENAL_LIBRARY}
    ${TinyXML_LIBRARIES}
    ${ZLIB_LIBRARIES}
)

IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
LINK_LIBRARIES(rt)
ENDIF()

IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
LINK_LIBRARIES("-framework CoreFoundation")
ENDIF()

ADD_SUBDIRECTORY(simulant)
ADD_SUBDIRECTORY(tests)

IF(SIMULANT_BUILD_SAMPLES)
    ADD_SUBDIRECTORY(samples)
ENDIF(SIMULANT_BUILD_SAMPLES)
