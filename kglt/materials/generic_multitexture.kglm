BEGIN(TECHNIQUE "default")
    BEGIN(PASS)
        SET(ITERATION ONCE)
    
        SET(ATTRIBUTE POSITION "vertex_position")
        SET(ATTRIBUTE TEXCOORD0 "texture_coord0")
        SET(ATTRIBUTE TEXCOORD1 "texture_coord1") 
        SET(ATTRIBUTE DIFFUSE "vertex_diffuse")
        
        SET(AUTO_UNIFORM MODELVIEW_PROJECTION_MATRIX "modelview_projection")
        SET(AUTO_UNIFORM TEXTURE_MATRIX0 "texture_matrix[0]")
        SET(AUTO_UNIFORM TEXTURE_MATRIX1 "texture_matrix[1]")
        SET(AUTO_UNIFORM LIGHT_GLOBAL_AMBIENT "global_ambient")
        SET(AUTO_UNIFORM ACTIVE_TEXTURE_UNITS "active_texture_count")
        
        SET(UNIFORM INT "textures[0]" 0)
        SET(UNIFORM INT "textures[1]" 1)
        
        BEGIN_DATA(VERTEX)
            #version 120
            attribute vec3 vertex_position;
            attribute vec2 texture_coord0;
            attribute vec2 texture_coord1;
            attribute vec4 vertex_diffuse;
            
            uniform mat4 modelview_projection;
            uniform mat4 texture_matrix[2];
        
            varying vec2 frag_texcoord0;
            varying vec2 frag_texcoord1;
            varying vec4 frag_diffuse;
            
            void main() {
                frag_texcoord0 = (texture_matrix[0] * vec4(texture_coord0, 0, 1)).st;
                frag_texcoord1 = (texture_matrix[1] * vec4(texture_coord1, 0, 1)).st; 
                frag_diffuse = vertex_diffuse;
                
                gl_Position = (modelview_projection * vec4(vertex_position, 1.0));
            }
        END_DATA(VERTEX)
        
        BEGIN_DATA(FRAGMENT)
            #version 120
            
            uniform sampler2D textures[2];
            uniform vec4 global_ambient;
            uniform int active_texture_count;

            varying vec2 frag_texcoord0;
            varying vec2 frag_texcoord1;
            varying vec4 frag_diffuse;
                        
            void main() {
                if(active_texture_count == 0) {
                    gl_FragColor = frag_diffuse * global_ambient;
                } else {
                    vec4 t1 = texture2D(textures[0], frag_texcoord0.st);
                    vec4 t2 = texture2D(textures[1], frag_texcoord1.st);
                    if(active_texture_count < 2) {
                        t2 = vec4(1.0, 1.0, 1.0, 0.0);
                    }
                    gl_FragColor = (((1.0 - t2.a) * t1) + (t2.a * t2)) * frag_diffuse * global_ambient;
                }
            }                
        END_DATA(FRAGMENT)
    END(PASS)
    BEGIN(PASS)
        SET(ITERATION ONCE_PER_LIGHT)

        SET(ATTRIBUTE POSITION "vertex_position")
        SET(ATTRIBUTE NORMAL "vertex_normal")

        SET(AUTO_UNIFORM MODELVIEW_PROJECTION_MATRIX "modelview_projection")
        SET(AUTO_UNIFORM INVERSE_TRANSPOSE_MODELVIEW_PROJECTION_MATRIX "normal_matrix")

        SET(AUTO_UNIFORM LIGHT_POSITION "light_position")
        SET(AUTO_UNIFORM LIGHT_DIFFUSE "light_diffuse")
        SET(AUTO_UNIFORM LIGHT_AMBIENT "light_ambient")
        SET(AUTO_UNIFORM LIGHT_SPECULAR "light_specular")

        SET(AUTO_UNIFORM MATERIAL_SHININESS "material_shininess")
        SET(AUTO_UNIFORM MATERIAL_AMBIENT "material_ambient")
        SET(AUTO_UNIFORM MATERIAL_DIFFUSE "material_diffuse")
        SET(AUTO_UNIFORM MATERIAL_SPECULAR "material_specular")

        SET(AUTO_UNIFORM LIGHT_CONSTANT_ATTENUATION "constant_attenuation")
        SET(AUTO_UNIFORM LIGHT_LINEAR_ATTENUATION "linear_attenuation")
        SET(AUTO_UNIFORM LIGHT_QUADRATIC_ATTENUATION "quadratic_attenuation")

        SET(FLAG BLEND MODULATE)

        BEGIN_DATA(VERTEX)
            #version 120
            attribute vec3 vertex_position;
            attribute vec3 vertex_normal;

            uniform mat4 modelview_projection;
            uniform mat3 normal_matrix;

            uniform vec4 light_position;

            uniform float constant_attenuation;
            uniform float linear_attenuation;
            uniform float quadratic_attenuation;

            varying vec3 normal, light_dir, eye_vec;
            varying float att;

            void main() {
                normal = normal_matrix * vertex_normal; //Calculate the normal
                vec4 position = (modelview_projection * vec4(vertex_position, 1.0));

                vec3 vv = position.xyz;
                light_dir = vec3(light_position.xyz - vv);
                eye_vec = -vv;

                float d = length(light_dir);
                //Don't apply for directional lights (hence the * w)
                att = 1.0 / (constant_attenuation + (linear_attenuation * d) + (quadratic_attenuation * d * d)) * light_position.w;
                if(att == 0.0) att = 1.0;

                gl_Position = position;
            }
        END_DATA(VERTEX)
        BEGIN_DATA(FRAGMENT)
            #version 120
            uniform vec4 light_diffuse;
            uniform vec4 light_ambient;
            uniform vec4 light_specular;

            uniform vec4 material_diffuse;
            uniform vec4 material_ambient;
            uniform vec4 material_specular;
            uniform float material_shininess;

            varying vec3 normal, light_dir, eye_vec;
            varying float att;

            void main() {
                vec4 final_colour = (light_ambient * material_ambient);
                vec3 N = normalize(normal);
                vec3 L = normalize(light_dir);
                float lambert_term = dot(N, L);
                if(lambert_term > 0.0) {
                    final_colour += light_diffuse * material_diffuse * lambert_term * att;
                    /*vec3 E = normalize(eye_vec);
                    vec3 R = reflect(-L, N);
                    float specular = pow(max(dot(R, E), 0.0), material_shininess);
                    final_colour += light_specular * material_specular * specular;*/
                }

                gl_FragColor = final_colour;
            }

        END_DATA(FRAGMENT)
    END(PASS)
END(TECHNIQUE)
