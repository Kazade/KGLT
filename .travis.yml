sudo: required
dist: trusty
language: cpp
services: docker
git:
 submodules: false

env:
 - AUDIODEV=null DREAMCAST=false BUILD_TYPE=debug
 - AUDIODEV=null DREAMCAST=false BUILD_TYPE=release
 - AUDIODEV=null DREAMCAST=true  BUILD_TYPE=release

os:
 - linux
 - osx

compiler:
 - clang

matrix:
 exclude:
  # Don't do the Dreamcast build on OSX
  - os: osx
    compiler: clang
    env: AUDIODEV=null DREAMCAST=true BUILD_TYPE=release

addons:
 apt:
  packages:
   - libsdl2-dev
   - libopenal-dev
   - libtinyxml-dev
   - libxi-dev
   - libxmu-dev
   - xserver-xorg-video-dummy
   - xpra
   - xorg-dev
   - opencl-headers
   - libgl1-mesa-dev
   - libxcursor-dev
   - libpulse-dev
   - libxinerama-dev
   - libxrandr-dev
   - libxv-dev
   - libasound2-dev
   - libudev-dev
   - mesa-utils
   - xvfb
   - mesa-common-dev
   - libgbm1
   - libxatracker-dev
   - xvfb
   - pulseaudio

before_install:
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get install --install-recommends linux-generic-lts-xenial xserver-xorg-core-lts-xenial xserver-xorg-lts-xenial xserver-xorg-video-all-lts-xenial xserver-xorg-input-all-lts-xenial libwayland-egl1-mesa-lts-xenial; fi
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sed -i 's/git@github.com:/https:\/\/github.com\//' .gitmodules; fi
 - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then sed -i '' 's/git@github.com:/https:\/\/github.com\//' .gitmodules; fi
 - git submodule update --init --recursive
 - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew update; fi
 - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install tinyxml sdl2 openal-soft; fi
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo usermod -a -G audio travis; fi
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo bash ./.prep-dummy-soundcard.sh; fi
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then dbus-launch pulseaudio --start; fi
 - if [[ "$DREAMCAST" == "true" ]]; then docker pull kazade/dreamcast-sdk; fi

install:
 - mkdir build && cd build
 # Never build samples on Travis, it's too slow
 - export SIMULANT_OPTIONS="-DSIMULANT_BUILD_SAMPLES=OFF"

 # If releasing, then do a release build (default is debug)
 - if [[ "$BUILD_TYPE" == "release" ]]; then export SIMULANT_OPTIONS="$SIMULANT_OPTIONS -DCMAKE_BUILD_TYPE=Release"; fi

 # If we're not building for the Dreamcast, then do a normal make dance
 - if [[ "$DREAMCAST" == "false" ]]; then cmake $SIMULANT_OPTIONS ..; fi
 - if [[ "$DREAMCAST" == "false" ]]; then make; fi

 # Otherwise, use docker
 - if [[ "$DREAMCAST" == "true" ]]; then sudo docker run kazade/dreamcast-sdk /bin/sh -c "source /etc/bash.bashrc; git clone --recursive --branch=${TRAVIS_BRANCH} https://github.com/${TRAVIS_REPO_SLUG}.git /simulant; mkdir -p /simulant/dbuild; cd /simulant/dbuild; cmake -DCMAKE_TOOLCHAIN_FILE=/simulant/toolchains/Dreamcast.cmake .. && make"; fi

before_script:
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export DISPLAY=:99; fi
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export LIBGL_ALWAYS_SOFTWARE=1; fi
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export ALSOFT_DRIVERS=pulse; fi
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1400x900x24 -ac +extension RANDR +extension GLX +render; fi
 - sleep 3
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then glxinfo; fi

script:
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]] && [[ $DREAMCAST == "false" ]]; then SDL_VIDEODRIVER=x11 catchsegv ./tests/simulant_tests; fi;
 - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then ./tests/simulant_tests; fi;

after_script:
    # Package everything into a folder for upload to GCS
    - if [[ "$DREAMCAST" == "true" ]]; then export BUILD_TARGET=dreamcast; fi
    - if [[ "$DREAMCAST" == "false" ]]; then export BUILD_TARGET=$TRAVIS_OS_NAME; fi;

    - cd $TRAVIS_BUILD_DIR # Make sure we're in the right place
    # Copy all the compiled libs for whatever platform
    - mkdir -p $BUILD_TARGET/simulant-latest/lib/$BUILD_TYPE
    - cp ./build/simulant/*.so $BUILD_TARGET/simulant-latest/lib/$BUILD_TYPE
    - cp ./build/simulant/*.a $BUILD_TARGET/simulant-latest/lib/$BUILD_TYPE
    - cp ./build/simulant/*.dynlib $BUILD_TARGET/simulant-latest/lib/$BUILD_TYPE
    - cp ./build/simulant/*.dll $BUILD_TARGET/simulant-latest/lib/$BUILD_TYPE
    - cp ./build/simulant/*.lib $BUILD_TARGET/simulant-latest/lib/$BUILD_TYPE

    # Copy the header files to the write place
    - mkdir -p $BUILD_TARGET/simulant-latest/include/simulant
    - find simulant -name "*.h" -type f -exec cp --parents {} ./$BUILD_TARGET/simulant-latest/include \;

    - cd $BUILD_TARGET; zip -r simulant-latest{.zip,}; rm -r simulant-latest; cd -;

deploy:
  provider: gcs
  bucket: staging.simulant-engine.appspot.com
  acl: public-read
  local-dir: $BUILD_TARGET
  skip_cleanup: true
  access_key_id: $GCS_ACCESS_KEY
  secret_access_key: $GCS_SECRET
  branch: master
  branch: travis-deploy

matrix:
 exclude:
  - os: osx
    env: DREAMCAST=true
  - os: osx
    compiler: gcc
  - compiler: clang
    env: DREAMCAST=true

