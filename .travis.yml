language: cpp
services: docker
git:
 submodules: false

env:
 global:
  - AUDIODEV=null

matrix:
 allow_failures:
  # Allow Windows builds to fail for now
  - os: linux
    dist: trusty
    compiler: clang
    env: CROSS_BUILD=windows BUILD_TYPE=release
    sudo: required

  - os: linux
    dist: trusty
    compiler: clang
    env: CROSS_BUILD=windows BUILD_TYPE=debug
    sudo: required

 include:
  # OSX builds
  - os: osx
    compiler: clang
    env: CROSS_BUILD=0 BUILD_TYPE=debug
    sudo: required
  - os: osx
    compiler: clang
    env: CROSS_BUILD=0 BUILD_TYPE=release
    sudo: required

  # Linux builds
  - os: linux
    dist: trusty
    compiler: clang
    env: CROSS_BUILD=0 BUILD_TYPE=debug
    sudo: required
  - os: linux
    dist: trusty
    compiler: clang
    env: CROSS_BUILD=0 BUILD_TYPE=release
    sudo: required

  # Dreamcast build
  - os: linux
    dist: trusty
    compiler: clang
    env: CROSS_BUILD=dreamcast BUILD_TYPE=release
    sudo: required

  # Windows build
  - os: linux
    dist: trusty
    compiler: clang
    env: CROSS_BUILD=windows BUILD_TYPE=release
    sudo: required

  - os: linux
    dist: trusty
    compiler: clang
    env: CROSS_BUILD=windows BUILD_TYPE=debug
    sudo: required

addons:
 apt:
  packages:
   - libsdl2-dev
   - libopenal-dev
   - libtinyxml-dev
   - libxi-dev
   - libxmu-dev
   - xserver-xorg-video-dummy
   - xpra
   - xorg-dev
   - opencl-headers
   - libgl1-mesa-dev
   - libxcursor-dev
   - libpulse-dev
   - libxinerama-dev
   - libxrandr-dev
   - libxv-dev
   - libasound2-dev
   - libudev-dev
   - mesa-utils
   - xvfb
   - mesa-common-dev
   - libgbm1
   - libxatracker-dev
   - xvfb
   - pulseaudio
   - dbus-x11
   - mingw-w64
   - gcc-mingw-w64-x86-64

before_install:
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get install --install-recommends linux-generic-lts-xenial xserver-xorg-core-lts-xenial xserver-xorg-lts-xenial xserver-xorg-video-all-lts-xenial xserver-xorg-input-all-lts-xenial libwayland-egl1-mesa-lts-xenial; fi
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sed -i 's/git@github.com:/https:\/\/github.com\//' .gitmodules; fi
 - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then sed -i '' 's/git@github.com:/https:\/\/github.com\//' .gitmodules; fi
 - git submodule update --init --recursive
 - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew update; fi
 - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install tinyxml sdl2 openal-soft; fi
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo usermod -a -G audio travis; fi
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo bash ./.prep-dummy-soundcard.sh; fi
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then dbus-launch pulseaudio --start; fi
 - if [[ "$CROSS_BUILD" == "dreamcast" ]]; then docker pull kazade/dreamcast-sdk; fi

install:
 - mkdir build && cd build
 # Never build samples on Travis, it's too slow
 - export SIMULANT_OPTIONS="-DSIMULANT_BUILD_SAMPLES=OFF"

 # If releasing, then do a release build (default is debug)
 - if [[ "$BUILD_TYPE" == "release" ]]; then export SIMULANT_OPTIONS="$SIMULANT_OPTIONS -DCMAKE_BUILD_TYPE=Release"; fi

 # If we're not cross-compiling, then do a normal make dance
 - if [[ "$CROSS_BUILD" == "0" ]]; then cmake $SIMULANT_OPTIONS ..; fi
 - if [[ "$CROSS_BUILD" == "0" ]]; then make; fi

 # Use mingw64-cmake for cross-compiling to windows
 - if [[ "$CROSS_BUILD" == "windows" ]]; then cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/Windows.cmake $SIMULANT_OPTIONS ..; fi
 - if [[ "$CROSS_BUILD" == "windows" ]]; then make; fi

 # Otherwise, use docker for the dreamcast
 - if [[ "$CROSS_BUILD" == "dreamcast" ]]; then sudo docker run --name dreamcast kazade/dreamcast-sdk /bin/sh -c "source /etc/bash.bashrc; git clone --recursive --branch=${TRAVIS_BRANCH} https://github.com/${TRAVIS_REPO_SLUG}.git /simulant; mkdir -p /simulant/dbuild; cd /simulant/dbuild; cmake -DCMAKE_TOOLCHAIN_FILE=/simulant/toolchains/Dreamcast.cmake .. && make"; fi

before_script:
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export DISPLAY=:99; fi
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export LIBGL_ALWAYS_SOFTWARE=1; fi
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export ALSOFT_DRIVERS=pulse; fi
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1400x900x24 -ac +extension RANDR +extension GLX +render; fi
 - sleep 3
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then glxinfo; fi

script:
  # Run the tests
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]] && [[ $CROSS_BUILD == "0" ]]; then SDL_VIDEODRIVER=x11 catchsegv ./tests/simulant_tests; fi;
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then ./tests/simulant_tests; fi;

  # Package everything into a folder for upload to GCS
  - if [[ "$CROSS_BUILD" == "dreamcast" ]]; then export BUILD_TARGET=dreamcast; fi
  - if [[ "$CROSS_BUILD" == "0" ]]; then export BUILD_TARGET=$TRAVIS_OS_NAME; fi;

  - cd $TRAVIS_BUILD_DIR

  # On most platforms, we package, but we don't upload. We leave that to the deploy section
  - if [[ "$CROSS_BUILD" == "0" ]]; then mkdir $BUILD_TARGET && ./platforms/package.py --build-type=$BUILD_TYPE --build-target=$BUILD_TARGET --target-folder=$TRAVIS_BUILD_DIR/$BUILD_TARGET --header-folder=./simulant --lib-folder=./build --package-only; fi;

  # Debugging
  - if [[ "$CROSS_BUILD" == "dreamcast" ]] && [[ $TRAVIS_BRANCH == "dreamcast-upload" ]]; then sudo docker exec -d dreamcast /bin/sh -c "ls -l /simulant"; fi

  # On the Dreamcast we need to run the package command on Docker as we don't have access to the host filesystem
  - if [[ "$CROSS_BUILD" == "dreamcast" ]] && [[ $TRAVIS_BRANCH == "dreamcast-upload" ]]; then sudo docker exec -d dreamcast /bin/sh -c "/simulant/platforms/package.py --build-type=$BUILD_TYPE --build-target=$BUILD_TARGET --target-folder=/simulant --header-folder=./simulant --lib-folder=/simulant/dbuild"; fi;

deploy:
  provider: gcs
  bucket: staging.simulant-engine.appspot.com
  acl: public-read
  local-dir: $BUILD_TARGET
  skip_cleanup: true
  access_key_id: $GCS_ACCESS_KEY
  secret_access_key: $GCS_SECRET
  branch: master

